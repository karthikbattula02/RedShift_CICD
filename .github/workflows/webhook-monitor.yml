name: Monitor Webhooks

on:
  push:

jobs:
  check-webhook:
    runs-on: ubuntu-latest
    steps:
      - name: Check webhook delivery for this commit
        id: check
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WEBHOOK_PAT2 }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const commitSha = context.sha;
            const commitMsg = context.payload.head_commit.message;

            console.log(`🔎 Checking webhook delivery for commit: ${commitSha}`);
            console.log(`💬 Commit message: ${commitMsg}`);

            // Get all webhooks
            const hooks = await github.request("GET /repos/{owner}/{repo}/hooks", { owner, repo });
            if (!hooks.data.length) throw new Error("No webhooks found in this repo!");

            // Pick the correct webhook by URL
            const hook = hooks.data.find(h => h.config.url.includes("https://1bf2a1a33060.ngrok-free.app/github-webhook/"));
            if (!hook) throw new Error("No matching webhook found!");
            const hookId = hook.id;

            // Polling for delivery
            const maxRetries = 40;       // up to 2 minutes (40 * 3s)
            const waitTime = 3000;       // 3 seconds
            let delivery;

            for (let i = 0; i < maxRetries; i++) {
              const deliveriesResp = await github.request("GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries", {
                owner, repo, hook_id: hookId
              });

              delivery = deliveriesResp.data.find(d =>
                d.request && d.request.payload && d.request.payload.head_commit?.id === commitSha
              );

              if (delivery) break;

              console.log(`⏳ Delivery not found yet, retrying (${i+1}/${maxRetries})...`);
              await new Promise(r => setTimeout(r, waitTime));
            }

            if (!delivery) {
              console.log(`❌ No webhook delivery found for commit ${commitSha} after ${maxRetries} retries`);
              core.setFailed(`❌ No webhook delivery found for commit ${commitSha}`);
            } else {
              console.log(`📦 Webhook status: ${delivery?.status || "unknown"}`);

              // If webhook failed, attempt redelivery
              if (delivery.status !== "ok") {
                console.log("⚠️ Webhook failed, attempting redelivery...");

                await github.request("POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts", {
                  owner, repo, hook_id: hookId, delivery_id: delivery.id
                });

                await new Promise(r => setTimeout(r, 5000));

                const deliveriesRetry = await github.request("GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries", {
                  owner, repo, hook_id: hookId
                });

                delivery = deliveriesRetry.data.find(d =>
                  d.request && d.request.payload && d.request.payload.head_commit?.id === commitSha
                );

                console.log(`🔁 After retry, webhook status: ${delivery?.status || "not found"}`);

                if (!delivery || delivery.status !== "ok") {
                  core.setFailed(`❌ Webhook failed even after retry for commit ${commitSha}`);
                }
              } else {
                console.log("✅ Webhook succeeded");
              }
            }

      - name: Send mail on failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "❌ Webhook failed for commit ${{ github.sha }}"
          to: photoskarthik2@gmail.com
          from: GitHub Actions <${{ secrets.MAIL_USERNAME }}>
          body: |
            Webhook failed even after retry.

            📌 Repository: ${{ github.repository }}
            🔗 Commit SHA: ${{ github.sha }}
            💬 Commit Message: ${{ github.event.head_commit.message }}
