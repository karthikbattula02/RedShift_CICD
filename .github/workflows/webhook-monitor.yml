name: Monitor Webhooks

on:
  push:
    branches: [main]

jobs:
  check-webhook:
    runs-on: ubuntu-latest
    outputs:
      final_status: ${{ steps.check.outputs.final_status }}
    steps:
      - name: Check and Redeliver Webhook if Needed
        id: check
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WEBHOOK_PAT2 }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const hookId = 558736907;

            // Current push commit SHA
            const currentSha = context.sha;

            // Fetch recent deliveries
            const { data: deliveries } = await github.request(
              "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
              { owner, repo, hook_id: hookId, per_page: 20 }
            );

            // Try to match delivery by commit SHA
            let myDelivery = null;
            for (const d of deliveries) {
              try {
                const payload = JSON.parse(d.request.payload);
                if (payload.after === currentSha) {
                  myDelivery = d;
                  break;
                }
              } catch (e) {
                console.log("Skipping delivery (could not parse payload):", d.id);
              }
            }

            if (!myDelivery) {
              core.setFailed(`No webhook delivery found for commit ${currentSha}`);
              return;
            }

            console.log("Matched delivery:", myDelivery);
            let finalStatus = myDelivery.status;

            // If not OK, retry
            if (finalStatus !== "ok") {
              console.log(`Webhook delivery ${myDelivery.id} failed (${finalStatus}). Retrying...`);
              await github.request(
                "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
                { owner, repo, hook_id: hookId, delivery_id: myDelivery.id }
              );

              // Wait before checking again
              await new Promise(r => setTimeout(r, 5000));

              // Refetch deliveries and get the same one
              const { data: redeliveries } = await github.request(
                "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
                { owner, repo, hook_id: hookId, per_page: 20 }
              );

              const updated = redeliveries.find(d => d.id === myDelivery.id);
              if (updated) {
                console.log("After redelivery:", updated);
                finalStatus = updated.status;
              }
            }

            core.setOutput("final_status", finalStatus);

  send-email:
    needs: check-webhook
    runs-on: ubuntu-latest
    steps:
      - name: Send Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "GitHub Webhook Status Notification"
          body: |
            Final Webhook Status: ${{ needs.check-webhook.outputs.final_status }}

            Repository: ${{ github.repository }}
            Commit SHA: ${{ github.sha }}
            Branch: ${{ github.ref }}

          to: photoskarthik2@gmail.com
          from: ${{ secrets.EMAIL_USERNAME }}
          secure: true
