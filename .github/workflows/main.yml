name: Webhook Monitor & Redelivery

on:
  push:
    branches:
      - main

jobs:
  monitor-webhook:
    runs-on: ubuntu-latest
    steps:
      - name: Check webhook delivery status
        id: check_status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WEBHOOK_PAT }}
          script: |
            const { repo, owner } = context.repo;
            const hookId = parseInt("${{ secrets.WEBHOOK_ID }}");

            const deliveries = await github.request(`GET /repos/${owner}/${repo}/hooks/${hookId}/deliveries`, {
              headers: { accept: 'application/vnd.github.v3+json' }
            });

            const latest = deliveries.data[0];
            const deliveryId = latest.id;
            const response = latest.response || {};
            const statusCode = response.status || 0; // Default to 0 if undefined
            
            console.log(`Latest delivery status code: ${statusCode}`);
            
            if (statusCode === 200) {
              core.setOutput("result", "success");
            } else {
              core.setOutput("result", "redeliver");
              core.setOutput("delivery_id", deliveryId);
            }


      - name: Redeliver webhook if needed
        if: steps.check_status.outputs.result == 'redeliver'
        id: redeliver
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WEBHOOK_PAT }}
          script: |
            const { repo, owner } = context.repo;
            const hookId = parseInt("${{ secrets.WEBHOOK_ID }}");
            const deliveryId = steps.check_status.outputs.delivery_id;

            await github.rest.repos.redeliverWebhookDelivery({
              owner,
              repo,
              hook_id: hookId,
              delivery_id: deliveryId,
            });

            console.log("Redelivery requested. Waiting 30s...");
            await new Promise(r => setTimeout(r, 30000));

            const status = await github.rest.repos.getWebhookDelivery({
              owner,
              repo,
              hook_id: hookId,
              delivery_id: deliveryId,
            });

            console.log("Delivery status after retry:", status.data.status);

            if (status.data.status === "SUCCESS") {
              core.setOutput("final_result", "success");
            } else {
              core.setOutput("final_result", "failure");
            }

      - name: Send success email
        if: steps.check_status.outputs.result == 'success' || steps.redeliver.outputs.final_result == 'success'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "✅ Webhook Delivery Successful"
          to: ${{ secrets.MAIL_TO }}
          from: GitHub Bot <bot@example.com>
          body: "The webhook delivery was successful or succeeded after redelivery."

      - name: Send failure email
        if: steps.redeliver.outputs.final_result == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "❌ Webhook Delivery Failed"
          to: ${{ secrets.MAIL_TO }}
          from: GitHub Bot <bot@example.com>
          body: "The webhook delivery failed and redelivery did not succeed."
